{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "This CloudFormation sample template creates test RDS databases in a VPC. You will be billed for the AWS  resources used if you create a stack from this template",
  "Parameters" : {
    "InputDBName": {
      "Default": "mydata",
      "Description" : "Enter Database name",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "64",
      "AllowedPattern" : "[a-z][a-z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain a minimum of 4 alphanumeric characters."
    },
    "InputDBUsername": {
      "Default": "rautsubh",
      "NoEcho": "false",
      "Description" : "Enter database Admin username for DB",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain a minimum of 4 alphanumeric characters."
    },
    "InputDBPassword": {
      "NoEcho": "true",
      "Description" : "Enter password for DB Admin user",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters with minimum of 8 characters."
    },
    "ClientIP" : {
      "Description" : "The IP address range that can be used to connect to the RDS instances from your local machine.It must be a valid IP CIDR range of the form x.x.x.x/x.Pls get your address using checkip.amazonaws.com or whatsmyip.org",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "14.200.30.165/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "It must be a valid IP CIDR range of the form x.x.x.x/x. Suggest to enable access to your IP address only. Pls get your address using checkip.amazonaws.com or whatsmyip.org."
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default":"Database Configuration" },
          "Parameters" : [ "InputDBName","InputDBUsername", "InputDBPassword" ]
        },
        {
          "Label" : { "default" : "Enter IP address for DB Security group Configuration" },
          "Parameters" : [ "ClientIP" ]
        }
      ]
    }
  },
  "Resources": {
    "VPC01": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.31.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {"Key": "Name", "Value": "RDS VPC"},
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}}
        ]
      }
    },
    "DBSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.0.0/26",
        "MapPublicIpOnLaunch" : "True",
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "VpcId": {
          "Ref": "VPC01"
        }
      }
    },
    "DBSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.1.0/26",
        "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "VpcId": {
          "Ref": "VPC01"
        }
      }
    },
    "DBSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.2.0/26",
        "AvailabilityZone": { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "VpcId": {
          "Ref": "VPC01"
        }
      }
    },
    "InternetGateway01": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC01" },
         "InternetGatewayId" : { "Ref" : "InternetGateway01" }
       }
    },
    "RouteTable01": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC01" },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable01" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway01" }
      }
    },
    "SubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DBSubnet1" },
        "RouteTableId" : { "Ref" : "RouteTable01" }
      }
    },
    "SubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DBSubnet2" },
        "RouteTableId" : { "Ref" : "RouteTable01" }
      }
    },
    "SubnetRouteTableAssociation3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DBSubnet3" },
        "RouteTableId" : { "Ref" : "RouteTable01" }
      }
    },
    "dbsubnetdefault": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet available for the RDS DB Instance",
        "SubnetIds": [{ "Ref": "DBSubnet1"}, {"Ref": "DBSubnet2"},{"Ref": "DBSubnet3"}]
      }
    },
    "EC2ClientSG":{
      "Type": "AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription": "EC2 SG",
        "VpcId": {"Ref":"VPC01"},
        "SecurityGroupIngress":[
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort":"22",
            "CidrIp":{"Ref":"ClientIP"}
          },{
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort":"22",
            "CidrIp":"72.21.192.0/19"
          }
        ]
      }
    },
    "myVPCSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "DB SG",
        "VpcId": {"Ref": "VPC01"},
        "SecurityGroupIngress" : [
          {
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306",
          "CidrIp" : { "Ref" : "ClientIP"}
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "1521",
          "ToPort" : "1521",
          "CidrIp" : { "Ref" : "ClientIP"}
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "1433",
          "ToPort" : "1433",
          "CidrIp" : { "Ref" : "ClientIP"}
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "5439",
          "ToPort" : "5439",
          "CidrIp" : { "Ref" : "ClientIP"}
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "5432",
          "ToPort" : "5432",
          "CidrIp" : { "Ref" : "ClientIP"}
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306",
          "CidrIp" : "172.31.0.0/16"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "1521",
          "ToPort" : "1521",
          "CidrIp" : "172.31.0.0/16"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "1433",
          "ToPort" : "1433",
          "CidrIp" : "172.31.0.0/16"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "5439",
          "ToPort" : "5439",
          "CidrIp" : "172.31.0.0/16"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "5432",
          "ToPort" : "5432",
          "CidrIp" : "172.31.0.0/16"
        }
        ,{
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306",
          "CidrIp" : "72.21.192.0/19"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "1521",
          "ToPort" : "1521",
          "CidrIp" : "72.21.192.0/19"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "1433",
          "ToPort" : "1433",
          "CidrIp" : "72.21.192.0/19"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "5439",
          "ToPort" : "5439",
          "CidrIp" : "72.21.192.0/19"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "5432",
          "ToPort" : "5432",
          "CidrIp" : "72.21.192.0/19"
        }


      ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "DB SG"
          }
        ]
      }
    }
    ,
    "EC2S3Role": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                  "Sid": "1",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Path": "/"
          }
        },
    "EC2S3Accesspolicy":{
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyDocument" : {
           "Version" : "2012-10-17",
           "Statement": [ {
           "Effect"   : "Allow",
           "Action"   : [
              "s3:ListBucket",
              "s3:GetBucketLocation"
           ],
           "Resource" : "*"
           } ,
           {
             "Effect": "Allow",
             "Action":
             [
              "s3:*"
                ],
                "Resource": "*"
           }
         ]
        },
        "PolicyName" : "S3Accesspolicy",
        "Roles" : [{ "Ref" : "EC2S3Role" }]
      },
      "DependsOn": "SQLS3Bucket"
    },
    "EC2Client":{
      "Type": "AWS::EC2::Instance",
      "Properties":{
        "ImageId" : "ami-2452275e",
        "InstanceType" : "t2.large",
        "KeyName" :"rautsubh",
        "UserData" :{
          "Fn::Base64": {
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -ex\n",
                "sudo yum -y update","\n",
                "sudo yum -y install postgresql","\n",
                "sudo yum -y install https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm","\n",
                "sudo yum -y install mysql-community-server","\n",
                "sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm","\n",
                "sudo yum -y install icu libunwind python-pip","\n",
                "sudo pip install --upgrade pip","\n",
                "sudo pip install mssql-cli","\n",
                "sudo yum -y install docker","\n",
                "sudo service docker start","\n",
                "sudo systemctl enable docker", "\n",
                "sudo usermod -aG docker ec2-user","\n",
                "sudo su","\n",
                "sudo echo 'docker run -it --rm mysql mysql -h", { "Fn::GetAtt": [ "MySQLDB", "Endpoint.Address" ] }, " -u",{ "Ref":"InputDBUsername" }," -p' >/usr/bin/mysqlb.docker","\n",
                "sudo chmod +x /usr/bin/mysqlb.docker","\n",
                "sudo echo 'docker run -it --rm postgres psql -h ", { "Fn::GetAtt": [ "PostgreSQL", "Endpoint.Address" ] }, " -U",{ "Ref":"InputDBUsername" }," ",{ "Ref":"InputDBName" }," -E' >/usr/bin/psqlb.docker","\n",
                "sudo chmod +x /usr/bin/psqlb.docker","\n",
                "sudo echo 'docker run -it --rm mysql mysql -h", { "Fn::GetAtt": [ "MariaDB", "Endpoint.Address" ] }, " -u",{ "Ref":"InputDBUsername" }," -p' >/usr/bin/mariadbb.docker","\n",
                "sudo chmod +x /usr/bin/mariadbb.docker","\n",
                "sudo echo 'docker run -it --rm mysql mysql -h", { "Fn::GetAtt": [ "AuroraMySQLCluster", "Endpoint.Address" ] }, " -u",{ "Ref":"InputDBUsername" }," -p' >/usr/bin/aumysqlb.docker","\n",
                "sudo chmod +x /usr/bin/aumysqlb.docker","\n",
                "sudo echo 'docker run -it --rm postgres psql -h ", { "Fn::GetAtt": [ "AuroraPGCluster", "Endpoint.Address" ] }, " -U",{ "Ref":"InputDBUsername" }," ",{ "Ref":"InputDBName" }," -E' >/usr/bin/aupsqlb.docker","\n",
                "sudo chmod +x /usr/bin/aupsqlb.docker","\n",
                "sudo echo 'docker run --interactive guywithnose/sqlplus sqlplus '''",{ "Ref":"InputDBUsername" },"@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=",{"Fn::GetAtt":["OracleDB","Endpoint.Address"]},") (PORT=",{"Fn::GetAtt":["OracleDB","Endpoint.Port"]},"))(CONNECT_DATA=(SID=",{"Ref":"InputDBName"},")))'''","' >/usr/bin/oracleb.docker","\n",
                "sudo chmod +x /usr/bin/oracleb.docker","\n",
                "sudo echo 'mssql-cli -S ", { "Fn::GetAtt": [ "SQLServerEE", "Endpoint.Address" ] },",",{ "Fn::GetAtt": [ "SQLServerEE", "Endpoint.Port" ] }," -U ",{ "Ref":"InputDBUsername" }," '>/usr/bin/mssqlb","\n",
                "sudo chmod +x /usr/bin/mssqlb","\n",
                "exit","\n"
              ]
            ]
          }
        },
        "SecurityGroupIds": [{ "Ref" : "EC2ClientSG" }],
        "IamInstanceProfile": { "Ref" : "Ec2InstProfile" },
        "SubnetId" : {"Ref" :"DBSubnet1"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
        {
          "Key": "Name",
          "Value":"Linux"
        }]

      },
      "DependsOn": ["MySQLDB","PostgreSQL","AuroraMySQLCluster","AuroraPGCluster","MariaDB","OracleDB","SQLServerEE"]
    },
    "Ec2InstProfile":{
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [{ "Ref" : "EC2S3Role" }]
       }
    },
    "DMSVPCRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [ "dms.amazonaws.com" ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole" ],
            "Path": "/",
            "RoleName":"dms-vpc-role"
          },
          "DependsOn": "DMScwRole"
        },
    "DMScwRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [ "dms.amazonaws.com" ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole" ],
            "Path": "/",
            "RoleName":"dms-cloudwatch-logs-role"
          }
        },
        "DMSredshiftRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                      "Sid": "1",
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [ "dms.amazonaws.com" ]
                      },
                      "Action": "sts:AssumeRole"
                    },
                    {
                      "Sid": "2",
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "redshift.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role" ],
                "Path": "/",
                "RoleName":"dms-access-for-endpoint"
              },
              "DependsOn": "DMScwRole"
            },
        "DMSReplicationInstance" : {
          "Type": "AWS::DMS::ReplicationInstance",
          "Properties": {
            "ReplicationInstanceClass": "dms.c4.large",
            "Tags": [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
            "VpcSecurityGroupIds" : [ { "Ref" : "myVPCSecurityGroup" } ],
            "ReplicationSubnetGroupIdentifier" :{ "Ref" : "DMSReplicationSubnetGroup" }
          },
          "DependsOn": "DMSVPCRole"
        },
        "DMSReplicationSubnetGroup" : {
           "Type" : "AWS::DMS::ReplicationSubnetGroup",
           "Properties" : {
              "SubnetIds" : [ { "Ref": "DBSubnet1"}, {"Ref": "DBSubnet2"},{"Ref": "DBSubnet3"} ],
              "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }],
              "ReplicationSubnetGroupDescription":"DMS Subnet group"
           }
        },
    "AuroraMySQLCluster" : {
     "Type" : "AWS::RDS::DBCluster",
     "DeletionPolicy" : "Delete",
     "Properties" : {
      "MasterUsername" : { "Ref" : "InputDBUsername" } ,
      "MasterUserPassword" : { "Ref" : "InputDBPassword" } ,
      "Engine" : "aurora",
      "DBSubnetGroupName" : { "Ref" : "dbsubnetdefault" },
      "DatabaseName":{ "Ref" : "InputDBName" },
      "DBClusterParameterGroupName" : { "Ref" : "AuroraDBClusterParameterGroup" },
      "VpcSecurityGroupIds"  : [{ "Ref" : "myVPCSecurityGroup" }]
      }
    },
    "AuroraDBClusterParameterGroup": {
      "Type": "AWS::RDS::DBClusterParameterGroup",
      "Properties" :{
        "Description" : "AuroraMySQL Cluster Parameter Group",
        "Family" : "aurora5.6",
        "Parameters" : {
          "time_zone" : "US/Eastern"
        }
      }
    },
    "AuroraInstance1" : {
     "Type" : "AWS::RDS::DBInstance",
     "DeletionPolicy" : "Delete",
     "Properties" : {
       "DBSubnetGroupName" : {"Ref" : "dbsubnetdefault"},
       "Engine" : "aurora",
       "DBClusterIdentifier" : {"Ref" : "AuroraMySQLCluster"},
       "PubliclyAccessible" : "true",
       "DBParameterGroupName" :{"Ref": "AUDBParameterGroup"},
       "DBInstanceClass" : "db.r3.xlarge",
       "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AuroraInstance2" : {
      "Type" : "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "DBSubnetGroupName" : {"Ref" : "dbsubnetdefault"},
        "Engine" : "aurora",
        "DBClusterIdentifier" : {"Ref" : "AuroraMySQLCluster"},
        "PubliclyAccessible" : "true",
        "DBParameterGroupName" :{"Ref": "AUDBParameterGroup"},
        "DBInstanceClass" : "db.r3.xlarge",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AUDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for Aurora",
        "Family" : "aurora5.6"
      }
    },
    "AuroraPGCluster" : {
      "Type" : "AWS::RDS::DBCluster",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "MasterUsername" : { "Ref" : "InputDBUsername" } ,
        "MasterUserPassword" : { "Ref" : "InputDBPassword" } ,
        "Engine" : "aurora-postgresql",
        "Port":"5432",
        "DatabaseName":{ "Ref" : "InputDBName" },
        "DBSubnetGroupName" : { "Ref" : "dbsubnetdefault" },
        "DBClusterParameterGroupName" : { "Ref" : "AuPGDBClusterParamGrp" },
        "VpcSecurityGroupIds"  : [{ "Ref" : "myVPCSecurityGroup" }]
      }
    },
    "AuPGDBClusterParamGrp": {
      "Type": "AWS::RDS::DBClusterParameterGroup",
      "Properties" :{
        "Description" : "AuroraMySQL Cluster Parameter Group",
        "Family" : "aurora-postgresql9.6",
        "Parameters" : {
          "timezone" : "UTC"
        }
      }
    },
    "AurorapgInstance1" : {
      "Type" : "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "DBSubnetGroupName" : {"Ref" : "dbsubnetdefault"},
        "Engine" : "aurora-postgresql",
      "DBClusterIdentifier" : {"Ref" : "AuroraPGCluster"},
      "PubliclyAccessible" : "true",
      "DBParameterGroupName" :{"Ref": "AUpgDBParamGrp"},
      "DBInstanceClass" : "db.r4.large",
      "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AurorapgInstance2" : {
      "Type" : "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "DBSubnetGroupName" : {"Ref" : "dbsubnetdefault"},
        "Engine" : "aurora-postgresql",
        "DBClusterIdentifier" : {"Ref" : "AuroraPGCluster"},
        "PubliclyAccessible" : "true",
        "DBParameterGroupName" :{"Ref": "AUpgDBParamGrp"},
        "DBInstanceClass" : "db.r4.large",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AUpgDBParamGrp": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for Aurora PG",
        "Family" : "aurora-postgresql9.6"
      }
    },
    "MySQLDB": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.m4.large",
        "MultiAZ":"true",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "MasterUsername": { "Ref" : "InputDBUsername" },
        "MasterUserPassword": { "Ref" : "InputDBPassword" },
        "DBParameterGroupName" :{"Ref": "MYDBParameterGroup"},
        "DBName": { "Ref" : "InputDBName" },
        "Engine": "mysql",
        "DBSubnetGroupName": {"Ref": "dbsubnetdefault"},
        "VPCSecurityGroups": [
          {
            "Ref": "myVPCSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "workload-type",
            "Value": "other"
          },
          {
            "Key": "Name",
            "Value":"MySQLDB"
          },
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      }
    },
    "MYDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for MySQLDB",
        "Family" : "mysql5.6"
      }
    },
    "MariaDB": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.m4.large",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "MasterUsername": { "Ref" : "InputDBUsername" },
        "MasterUserPassword": { "Ref" : "InputDBPassword" },
        "DBName": { "Ref" : "InputDBName" },
        "DBParameterGroupName" :{"Ref": "MRDBParameterGroup"},
        "Engine": "mariadb",
        "DBSubnetGroupName": {"Ref": "dbsubnetdefault"},
        "VPCSecurityGroups": [
          {
            "Ref": "myVPCSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "workload-type",
            "Value": "other"
          },
          {
            "Key": "Name",
            "Value":"MariaDB"
          },
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      }
    },
    "MRDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for MariaDB",
        "Family" : "mariadb10.1"
      }
    },
    "PostgreSQL": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.m4.large",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "MasterUsername": { "Ref" : "InputDBUsername" },
        "MasterUserPassword": { "Ref" : "InputDBPassword" },
        "DBName": { "Ref" : "InputDBName" },
        "Engine": "postgres",
        "DBParameterGroupName" :{"Ref": "PGDBParameterGroup"},
        "DBSubnetGroupName": {"Ref": "dbsubnetdefault"},
        "VPCSecurityGroups": [
          {
            "Ref": "myVPCSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "workload-type",
            "Value": "other"
          },
          {
            "Key": "Name",
            "Value":"PostgreSQL"
          },
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      }
    },
    "PGDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for postgres",
        "Family" : "postgres9.6"
      }
    },
    "OracleDB": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties": {
        "AllocatedStorage": "100",
        "CharacterSetName": "AL32UTF8",
        "DBInstanceClass": "db.m4.large",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "MasterUsername": { "Ref" : "InputDBUsername" },
        "MasterUserPassword": { "Ref" : "InputDBPassword" },
        "DBName": { "Ref" : "InputDBName" },
        "Engine": "oracle-ee",
        "DBParameterGroupName" :{"Ref": "OCDBParameterGroup"},
        "DBSubnetGroupName": {"Ref": "dbsubnetdefault"},
        "VPCSecurityGroups": [
          {
            "Ref": "myVPCSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "workload-type",
            "Value": "other"
          },
          {
            "Key": "Name",
            "Value":"OracleDB"
          },
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      }
    },
    "OCDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for oracle-ee",
        "Family" : "oracle-ee-12.1"
      }
    },
    "SQLS3Bucket": {
      "Type" : "AWS::S3::Bucket"
    },
    "SQLS3Role": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                  "Sid": "1",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [ "rds.amazonaws.com" ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Path": "/"
          }
        },
    "SQLS3Accesspolicy":{
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyDocument" : {
           "Version" : "2012-10-17",
           "Statement": [ {
           "Effect"   : "Allow",
           "Action"   : [
              "s3:ListBucket",
              "s3:GetBucketLocation"
           ],
           "Resource" : { "Fn::GetAtt" : [ "SQLS3Bucket", "Arn" ] }
           } ,
           {
             "Effect": "Allow",
             "Action":
             [
              "s3:GetObjectMetaData",
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListMultipartUploadParts",
              "s3:AbortMultipartUpload"
                ],
                "Resource": { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "SQLS3Bucket", "Arn" ] },"/*" ] ] }
           }
         ]
        },
        "PolicyName" : "S3Accesspolicy",
        "Roles" : [{ "Ref" : "SQLS3Role" }]
      },
      "DependsOn": "SQLS3Bucket"
    },
    "SQLOptionGroup":{
       "Type" : "AWS::RDS::OptionGroup",
       "Properties" : {
          "EngineName" : "sqlserver-ee",
          "MajorEngineVersion" : "14.00",
          "OptionGroupDescription" : "SQLServer s3 backup restore",
          "OptionConfigurations" : [
            {
            "OptionName": "SQLSERVER_BACKUP_RESTORE",
            "OptionSettings": [
              {
                "Name":"IAM_ROLE_ARN",
                "Value":{"Fn::GetAtt" : ["SQLS3Role", "Arn"] }
              }
            ]
          }]
       }
    },
    "SQLServerEE": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties": {
        "AllocatedStorage": "200",
        "DBInstanceClass": "db.m4.xlarge",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "MasterUsername": { "Ref" : "InputDBUsername" },
        "MasterUserPassword": { "Ref" : "InputDBPassword" },
        "DBName": "",
        "LicenseModel":  "license-included",
        "Engine": "sqlserver-ee",
        "EngineVersion": "14.00.1000.169.v1",
        "DBParameterGroupName" :{"Ref": "MSDBParameterGroup"},
        "OptionGroupName":{ "Ref" : "SQLOptionGroup" },
        "DBSubnetGroupName": {"Ref": "dbsubnetdefault"},
        "VPCSecurityGroups": [
          {
            "Ref": "myVPCSecurityGroup"
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value":"SQLServerEE"
          },
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      }
    },
    "MSDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for sqlserver-ee",
        "Family" : "sqlserver-ee-14.0"
      }
    }
  },
  "Outputs" : {
    "Final" : {
      "Value" : { "Fn::Join": ["", [
      "Instance:"
      ," NewLine ",
      "ssh -i rautsubh.pem ec2-user@", { "Fn::GetAtt": [ "EC2Client", "PublicDnsName" ] }
       ," NewLine ",
       " NewLine ",
       "AuroraMySQLWriterCon:"
       ," NewLine ",
       "mysql -h ", { "Fn::GetAtt": [ "AuroraMySQLCluster", "Endpoint.Address" ] }," -P ",{ "Fn::GetAtt": [ "AuroraMySQLCluster", "Endpoint.Port" ] }," -u ",{ "Ref":"InputDBUsername" }," -p"
       ," NewLine ",
       "AuroraMySQLReaderCon:"
       ," NewLine ",
       "mysql -h ", { "Fn::GetAtt": [ "AuroraMySQLCluster", "ReadEndpoint.Address" ] }," -P ",{ "Fn::GetAtt": [ "AuroraMySQLCluster", "Endpoint.Port" ] }," -u ",{ "Ref":"InputDBUsername" }," -p"
       ," NewLine ",
       "PostgreSQLCon:"
       ," NewLine ",
        "psql -U ",{ "Ref":"InputDBUsername" }," -h ", { "Fn::GetAtt": [ "PostgreSQL", "Endpoint.Address" ] }," -p ",{ "Fn::GetAtt": [ "PostgreSQL", "Endpoint.Port" ] }," ",{ "Ref" : "InputDBName" }
       ," NewLine ",
       " NewLine ",
       "AuroraPGWriterCon:"
       ," NewLine ",
       "psql -U ",{ "Ref":"InputDBUsername" }," -h ", { "Fn::GetAtt": [ "AuroraPGCluster", "Endpoint.Address" ] }," -p ",{ "Fn::GetAtt": [ "AuroraPGCluster", "Endpoint.Port" ] }," ",{ "Ref" : "InputDBName" }
       ," NewLine ",
       "AuroraPGReaderCon:"
       ," NewLine ",
       "psql -U ",{ "Ref":"InputDBUsername" }," -h ", { "Fn::GetAtt": [ "AuroraPGCluster", "ReadEndpoint.Address" ] }," -p ",{ "Fn::GetAtt": [ "AuroraPGCluster", "Endpoint.Port" ] }," ",{ "Ref" : "InputDBName" }
       ," NewLine ",
       " NewLine ",
       "S3Bucketrestore:"
       ," NewLine ",
       "exec msdb.dbo.rds_restore_database  @restore_db_name='WideWorldImporters', @s3_arn_to_restore_from='", { "Fn::GetAtt": [ "SQLS3Bucket", "Arn" ] },"/WideWorldImporters-Full.bak'"
       ," NewLine ",
       "exec msdb.dbo.rds_restore_database  @restore_db_name='AdventureWorks2012', @s3_arn_to_restore_from='", { "Fn::GetAtt": [ "SQLS3Bucket", "Arn" ] },"/AdventureWorks2012.bak'"
       ," NewLine ",
       "Permission Command"
       ," NewLine ",
       "aws s3 cp s3://sqlbackup-rautsubh/ s3://",{"Fn::Select":["0",{"Fn::Split":[".",{ "Fn::GetAtt": [ "SQLS3Bucket", "DomainName" ] }]}]},"/ --recursive "
       ," NewLine ",
       "S3Bucket:"
       ," NewLine ",
       "BucketDomainName:",{ "Fn::GetAtt": [ "SQLS3Bucket", "DomainName" ] }
       ," NewLine ",
       " NewLine ",
       "MySQLDBEndpointCon:"
       ," NewLine ",
       "mysql -h ", { "Fn::GetAtt": [ "MySQLDB", "Endpoint.Address" ] }," -P ",{ "Fn::GetAtt": [ "MySQLDB", "Endpoint.Port" ] }," -u ",{ "Ref":"InputDBUsername" }," -p ",{ "Ref" : "InputDBName" }
       ," NewLine ",
       "docker run -it --rm mysql mysql -h",{ "Fn::GetAtt": [ "MySQLDB", "Endpoint.Address" ] }," -P ",{ "Fn::GetAtt": [ "MySQLDB", "Endpoint.Port" ] }," -u",{ "Ref":"InputDBUsername" }," -p ",{ "Ref" : "InputDBName" }
       ," NewLine ",
       "MariaDBEndpointCon:"
       ," NewLine ",
       "mysql -h ", { "Fn::GetAtt": [ "MariaDB", "Endpoint.Address" ] }," -P ",{ "Fn::GetAtt": [ "MariaDB", "Endpoint.Port" ] }," -u ",{ "Ref":"InputDBUsername" }," -p ",{ "Ref" : "InputDBName" }
       ," NewLine ",
       " NewLine ",
       "OracleConnViaDockerSQLPlus"
       ," NewLine ",
       "docker run --interactive guywithnose/sqlplus sqlplus '",{ "Ref":"InputDBUsername" },"@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=",{"Fn::GetAtt":["OracleDB","Endpoint.Address"]},") (PORT=",{"Fn::GetAtt":["OracleDB","Endpoint.Port"]},"))(CONNECT_DATA=(SID=",{"Ref":"InputDBName"},")))'"
       ," NewLine ",
       " NewLine ",
       "SQLServerEndpointCon:"
       ," NewLine ",
       "sqlcmd -S ", { "Fn::GetAtt": [ "SQLServerEE", "Endpoint.Address" ] },",",{ "Fn::GetAtt": [ "SQLServerEE", "Endpoint.Port" ] }," -U ",{ "Ref":"InputDBUsername" }
       ," NewLine ",
       "SQLServerMSSQLCLI:"
       ," NewLine ",
       "mssql-cli -S ", { "Fn::GetAtt": [ "SQLServerEE", "Endpoint.Address" ] },",",{ "Fn::GetAtt": [ "SQLServerEE", "Endpoint.Port" ] }," -U ",{ "Ref":"InputDBUsername" }
       ] ]}
    }
  }
}
